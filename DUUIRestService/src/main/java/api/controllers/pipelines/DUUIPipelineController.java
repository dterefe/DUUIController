package api.controllers.pipelines;

import api.controllers.components.DUUIComponentController;
import api.controllers.processes.DUUIProcessController;
import duui.process.IDUUIProcessHandler;
import api.storage.AggregationProps;
import api.storage.DUUIMongoDBStorage;
import api.storage.MongoDBFilters;
import com.mongodb.client.model.*;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.bson.types.ObjectId;
import org.texttechnologylab.DockerUnifiedUIMAInterface.DUUIComposer;
import org.texttechnologylab.DockerUnifiedUIMAInterface.monitoring.DUUIStatus;

import java.net.UnknownHostException;
import java.security.InvalidParameterException;
import java.time.Instant;
import java.util.*;
import java.util.regex.Pattern;

import static api.routes.DUUIRequestHelper.isNullOrEmpty;
import static api.storage.DUUIMongoDBStorage.Pipelines;
import static api.storage.DUUIMongoDBStorage.convertObjectIdToString;

public class DUUIPipelineController {
    private static final Map<String, DUUIComposer> reusablePipelines = new HashMap<>();

    private static final Set<String> UPDATABLE_FIELDS = Set.of(
        "name",
        "description",
        "settings",
        "tags",
        "times_used",
        "last_used",
        "modified_at",
        "status"
    );

    /**
     * Retrieve one pipeline given its id.
     *
     * @param id A unique 24 character identifier generated by MongoDB.
     * @return A {@link Document} containing the pipeline data or null if nothing matched.
     */
    public static Document findOneById(String id) {
        return findOneById(id, true);
    }

    /**
     * Retrieve one pipeline given its id.
     *
     * @param id            A unique 24 character identifier generated by MongoDB.
     * @param getComponents Wether to include the pipeline's components or not.
     * @return A document containing the pipeline data or null if nothing matched.
     */
    public static Document findOneById(String id, boolean getComponents) {
        Document result;

        try {
            result =
                DUUIMongoDBStorage
                    .Pipelines()
                    .find(Filters.eq(new ObjectId(id)))
                    .first();

        } catch (IllegalArgumentException exception) {
            result = null;
        }

        if (result == null) return null;

        if (getComponents) {
            MongoDBFilters componentFilters = new MongoDBFilters();
            componentFilters.addFilter(Filters.eq("pipeline_id", id));
            componentFilters.sort("index");
            List<Document> components = DUUIComponentController.findMany(componentFilters);
            convertObjectIdToString(result);
            result.append("components", components);
        }
        return result;
    }

    /**
     * Retrieve one or more pipelines from the database given a userId and {@link AggregationProps} to sort
     * and filter the results.
     *
     * @param filters       A {@link MongoDBFilters} object that contains filter options.
     * @param getComponents Wether to include components in the pipeline data.
     * @return A Document containing a list of matched pipelines.
     */
    public static Document findMany(MongoDBFilters filters,
                                    boolean getComponents
    ) {

        List<Bson> aggregationPipeline = new ArrayList<>();
        List<Bson> facet = new ArrayList<>();

        if (!filters.getFilters().isEmpty()) {
            aggregationPipeline.add(Aggregates.match(Filters.and(filters.getFilters())));
        }

        if (filters.getSearch() != null) {
            aggregationPipeline.add(
                Aggregates.addFields(new Field<>("joined_tags", new Document("$reduce",
                        new Document("input", "$tags")
                            .append("initialValue", "")
                            .append("in",
                                new Document("$concat",
                                    List.of("$$value", new Document("$cond",
                                        List.of(new Document("$eq", List.of("$$value", "")), "", " ")), "$$this"))))
                    )
                )
            );

            aggregationPipeline.add(
                Aggregates.addFields(
                    new Field<>(
                        "search",
                        new Document(
                            "$concat",
                            List.of("$name", " ", "$description", " ", "$joined_tags")
                        )
                    )
                )
            );
            aggregationPipeline.add(
                Aggregates.match(
                    new Document("search", Pattern.compile(filters.getSearch(), Pattern.CASE_INSENSITIVE))
                )
            );

            aggregationPipeline.add(
                Aggregates.project(
                    Projections.exclude("joined_tags", "search")
                )
            );
        }


        if (!filters.getSort().isEmpty()) {
            facet.add(Aggregates.sort(
                filters.getOrder() == 1
                    ? Sorts.ascending(filters.getSort())
                    : Sorts.descending(filters.getSort())
            ));
        }

        if (filters.getSkip() > 0) facet.add(Aggregates.skip(filters.getSkip()));
        if (filters.getLimit() > 0) facet.add(Aggregates.limit(filters.getLimit()));

        facet.add(Aggregates.sort(Sorts.descending("user_id")));

        aggregationPipeline.add(Aggregates.facet(
            new Facet("pipelines", facet),
            new Facet("count", Aggregates.count())
        ));

        List<Document> documents = DUUIMongoDBStorage
            .Pipelines()
            .aggregate(aggregationPipeline)
            .into(new ArrayList<>());

        if (documents.isEmpty())
            return new Document("pipelines", new ArrayList<>()).append("count", 0);

        List<Document> findings = documents.get(0).getList("pipelines", Document.class);
        findings.forEach(DUUIMongoDBStorage::convertObjectIdToString);

        int count;
        try {
            count = documents.get(0).getList("count", Document.class).get(0).getInteger("count");
        } catch (IndexOutOfBoundsException exception) {
            count = 0;
        }


        if (getComponents) {
            for (Document pipeline : findings) {
                MongoDBFilters componentFilters = new MongoDBFilters();
                componentFilters.addFilter(Filters.eq("pipeline_id", pipeline.getString("oid")));
                componentFilters.sort("index");
                pipeline.append("components", DUUIComponentController.findMany(componentFilters));
            }
        }

        return new Document("pipelines", findings).append("count", count);
    }


    public static void updateOne(String id, Document updates) {
        updates.append("modified_at", Instant.now().toEpochMilli());

        DUUIMongoDBStorage
            .updateDocument(
                DUUIMongoDBStorage.Pipelines(),
                Filters.eq(new ObjectId(id)),
                updates,
                UPDATABLE_FIELDS
            );

        List<Document> components = updates.getList("components", Document.class);
        if (!isNullOrEmpty(components)) {
            for (Document component : components) {
                DUUIComponentController
                    .setIndex(
                        component.getString("oid"),
                        components.indexOf(component));
            }
        }
    }


    public static boolean instantiate(String id) {
        setStatus(id, DUUIStatus.SETUP);
        Document pipeline = findOneById(id);

        if (pipeline == null) return false;

        try {
            DUUIComposer composer = DUUIProcessController.instantiatePipeline(pipeline);
            reusablePipelines.put(id, composer);
            setStatus(id, DUUIStatus.IDLE);
            return true;
        } catch (Exception exception) {
            setStatus(id, DUUIStatus.INACTIVE);
            return false;
        }
    }

    public static boolean shutdown(String id) {
        DUUIComposer composer = reusablePipelines.get(id);
        if (composer == null) return false;

        setStatus(id, DUUIStatus.SHUTDOWN);

        try {
            shutdownPipeline(id);
            reusablePipelines.remove(id);
            setStatus(id, DUUIStatus.INACTIVE);
            return true;
        } catch (Exception e) {
            setStatus(id, DUUIStatus.IDLE);
            return false;
        }
    }


    public static Map<String, DUUIComposer> getReusablePipelines() {
        return reusablePipelines;
    }

    public static boolean deleteOne(String id) {
        return Pipelines()
            .deleteOne(Filters.eq(new ObjectId(id)))
            .getDeletedCount() > 0;
    }

    public static void interruptIfRunning(String pipelineId) {
        if (reusablePipelines.containsKey(pipelineId)) {
            for (IDUUIProcessHandler handler : DUUIProcessController.getActiveProcesses(pipelineId)) {
                handler.cancel();
            }
            reusablePipelines.remove(pipelineId);
        }
    }

    public static void shutdownPipeline(String pipelineId) {
        if (reusablePipelines.containsKey(pipelineId)) {
            for (IDUUIProcessHandler handler : DUUIProcessController.getActiveProcesses(pipelineId)) {
                handler.cancel();
            }
            try {
                reusablePipelines.get(pipelineId).asService(false).shutdown();
            } catch (UnknownHostException | InvalidParameterException ignored) {
            }
        }
    }

    public static void setStatus(String id, String status) {
        DUUIPipelineController.updateOne(id, new Document("status", status));
    }

    /**
     * This function performs a set of Aggregations to generate statistics for the usage of a pipeline.
     * These Aggregations include
     * - a grouping by status (Completed, Failed, etc.)
     * - a grouping by errors
     * - a grouping by input provider
     * - a grouping by output provider
     * - a grouping by usage per month
     * - a sum of the total number documents procesed.
     *
     * @param pipelineId The identifier for the pipeline
     * @return A BSON Document with the aggregation result.
     */
    public static Document getStatisticsForPipeline(String pipelineId) {
        List<Document> facets = DUUIMongoDBStorage
            .Processses()
            .aggregate(
                List.of(
                    Aggregates.match(Filters.eq("pipeline_id", pipelineId)),
                    Aggregates.facet(
                        new Facet("status", Aggregates.group("$status", Accumulators.sum("count", 1))),
                        new Facet("errors", Aggregates.match(Filters.ne("error", null)),
                            Aggregates.addFields(new Field<>("errorName", new Document("$arrayElemAt", Arrays.asList(new Document("$split", Arrays.asList("$error", " - ")), 0)))),
                            Aggregates.project(Projections.include("errorName")),
                            Aggregates.group("$errorName", Accumulators.sum("count", 1))
                        ),
                        new Facet("usage",
                            Aggregates.project(Projections.computed("convertedDate", new Document("$toDate", "$started_at"))),
                            new Document("$group", new Document("_id",
                                new Document("year", new Document("$year", "$convertedDate"))
                                    .append("month", new Document("$month", "$convertedDate")))
                                .append("count", new Document("$sum", 1)))
                        ),
                        new Facet("input", Aggregates.group("$input.provider", Accumulators.sum("count", 1))),
                        new Facet("output", Aggregates.group("$output.provider", Accumulators.sum("count", 1))),
                        new Facet("size", new Document("$group", new Document("_id", null).append("count", new Document("$sum", new Document("$size", "$document_names")))))
                    )
                )
            ).into(new ArrayList<>());

        Document result = new Document();
        if (isNullOrEmpty(facets)) return result;
        result = facets.get(0);

        return result;
    }
}
